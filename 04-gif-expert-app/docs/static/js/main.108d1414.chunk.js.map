{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","App.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","val","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","i","App","categories","item","ReactDOM","render","document","getElementById"],"mappings":"iNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,cAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACE,sBAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IAC1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBhB,SAAAP,GACxB,IAAMQ,EAAMR,EAAES,OAAOH,MAErBR,EAAcU,S,+BCVLE,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAIFI,MAAOF,GAJL,cAIfG,EAJe,gBAKAA,EAAKC,OALL,uBAKdC,EALc,EAKdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEtC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SASvB,ECV0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WAERxB,EAAQC,GACLwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACrBf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDNwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAIpB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,6BAEZ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAkB,GAAC,OAAI,cAAC,EAAD,eAA4BA,GAAVA,EAAEhB,aEMhCiB,EA3BH,WAGV,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAQA,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACI6C,EAAWpB,KAAI,SAACqB,GAAD,OACf,cAAC,EAAD,CAAoB9B,SAAU8B,GAAhBA,YClBxBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.108d1414.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('Hola Mundo')\n\n  const handleInputChange = e => {\n    const val = e.target.value;\n\n    setInputValue(val);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if(inputValue.trim().length>2){\n      setCategories(cats => [ inputValue, ...cats]);\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: propTypes.func.isRequired\n}","export const getGifs = async (category) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=xVCDbHqatim3HlDWEzOAagxTavwDbise`;\n\n  const resp = await fetch( url );\n  const {data} = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  ) // javascript class와 구분하고자 className을 쓴다.\n}\n","import React, {useState, useEffect} from 'react'\n// import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({category}) => {\n\n  // const [images, setImages] = useState([])\n\n  // useEffect(()=>{\n  //   getGifs(category)\n  //     .then(setImages);\n  // }, [category]); // []가 있어야 한 번만 실행된다. 처음 렌더링될 때만.\n  // // category가 바뀌면 그때만 다시 실행한다.\n  const {data:images, loading} = useFetchGifs(category);\n\n  // getGifs(); // dom이 변할 때마다 계속 실행이 된다.\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">'Cargando.....'</p>}\n\n      <div className=\"card-grid\">      \n          {images.map(i => <GifGridItem key={i.id} {...i}/>)}\n      </div>\n    </>\n  ) // list를 그대로 가감없이 보여주니까 그냥 map으로 안쪽 것들을 바꾸는 것뿐이다.\n}","// use means it is hook.\n\nimport React, {useState, useEffect} from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    \n    getGifs(category)\n      .then(imgs => setState({\n        data: imgs,\n        loading: false\n      }))\n\n  }, [category])\n\n  return state;\n} // it acts like functional components","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst App = () => {\n\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n  const [categories, setCategories] = useState(['One Punch']);\n\n  const handleAdd = () => {\n    const name = '충사';\n\n    setCategories(cats => [...cats, name]);\n  }\n  \n  return  (\n    <>\n      <h2>Gif-Expert-App</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        { categories.map((item)=>\n          <GifGrid key={item} category={item}\n        />) }\n      </ol>\n    </>\n  );\n\n} // key는 무조건 유니크해야 함.\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}